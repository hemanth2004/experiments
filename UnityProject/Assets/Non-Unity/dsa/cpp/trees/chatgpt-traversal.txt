Chat gpt's grain of wisdom

this is the same level order traversal function Harsha surya wrote
but cgpt rewrites it with us being able to keep note of 
what level we are in

void LevelOrder(Node* root)
{
    if(root == nullptr)
        return;
    
    queue<Node*> Q;
    Q.push(root);
    Q.push(nullptr); // Delimiter for the first level
    int level = 0; // Initialize level counter

    while(!Q.empty())
    {
        Node* current = Q.front();
        Q.pop();

        // Check if current is a delimiter
        if (current == nullptr) {
            // If queue is empty or the next node is a delimiter, break the loop
            if (Q.empty() || Q.front() == nullptr) break;
            cout << endl; // Move to the next line for the next level
            ++level; // Increment the level counter
            Q.push(nullptr); // Enqueue delimiter for the next level
            continue;
        }

        cout << current->data << " ";
        if(current->left != nullptr)
            Q.push(current->left);
        if(current->right != nullptr)
            Q.push(current->right);
    }
}

Delimiter: A character/short string used to seperate linear
tokens of data/data streams. 
🗣️🗣️🗣️🔥🔥🔥 🤫🧏‍♀️^^^

so if the binary tree is something like
        1
       / \
      2   3
     / \ / \
    4  5 6  7
(the ascii art for this binary tree was also generated by cgpt)

Iteration 1:
Queue:   1 (front)
Action:  Print and dequeue 1
         Enqueue 2 and 3
Queue:   2 -> 3 -> nullptr
Level:   0

Iteration 2:
Queue:   2 (front) -> 3
Action:  Print and dequeue 2
         Enqueue 4 and 5
Queue:   3 -> 4 -> 5 -> nullptr
Level:   1

Iteration 3:
Queue:   3 (front) -> 4 -> 5
Action:  Print and dequeue 3
         Enqueue 6 and 7
Queue:   4 -> 5 -> 6 -> 7 -> nullptr
Level:   2

Iteration 4:
Queue:   4 (front) -> 5 -> 6 -> 7
Action:  Print and dequeue 4
Queue:   5 -> 6 -> 7 -> nullptr
Level:   3

Iteration 5:
Queue:   5 (front) -> 6 -> 7
Action:  Print and dequeue 5
Queue:   6 -> 7 -> nullptr
Level:   3

Iteration 6:
Queue:   6 (front) -> 7
Action:  Print and dequeue 6
Queue:   7 -> nullptr
Level:   3

Iteration 7:
Queue:   7 (front)
Action:  Print and dequeue 7
Queue:   nullptr
Level:   3


